require 'json'

class TinyQueries
	# This class can be used to call compiled queries generated by the TinyQueries compiler
	#
	# Example:
	#	>> tq = TinyQueries.new()
	#	>> tq.connector = "<executable TinyQueries connector>"
	#	>> result = tq.run("my-query")
	#

	# :connector should be set to an executable TinyQueries connector
	attr_accessor :connector
	
	# :globals is a hash to be used for global query parameters
	# Global query parameters are sent to each query call along with the regular query parameters
	attr_accessor :globals
	
	# Constructor
	def initialize()
		@connector 	= nil
		@globals 	= {}
	end
	
	# Runs a query term and returns the result as a hash
	# Params:
	# +term+:: query term, like "a" or "a(b)" or "a:b"
	# +params+:: a hash for the query parameters
	def run(term, params={})
	
		# Check if connector is set
		if @connector.nil?
			raise "You need to set connector first - calling queries without connector is not supported yet"
		end

		if params.class != Hash
			raise "Parameters should be passed as a Hash"
		end
		
		# Create command
		command = 
			@connector + 
			" \"" + term + "\"" + 
			" \"" + JSON.generate( params.merge( @globals ) ).gsub(/\"/,"\\\"") + "\""
		
		# Execute the command and capture the output
		json = `#{command}`
		
		result = JSON.parse( json )
		
		# Check if result contains error message
		if result.class == Hash and result.has_key?("error")
			raise result["error"]
		end
		
		return result
	end
end

